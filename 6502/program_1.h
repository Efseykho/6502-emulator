#ifndef PROGRAM_1_H
#define PROGRAM_1_H

//a simple program we might want to execute
//this was compiled by 
// http://e-tradition.net/bytes/6502/assembler.html

unsigned char program[] = 
{ 
0xA9, 0x0F, 0x8D, 0x00, 0x00, 0xA9, 0x04, 0x8D,
0x01, 0x00, 0xA9, 0x01, 0x8D, 0x02, 0x00, 0xAD,
0x00, 0x00, 0x8D, 0x03, 0x00, 0xAD, 0x01, 0x00,
0x8D, 0x04, 0x00, 0xAD, 0x02, 0x00, 0xC9, 0x00,
0xD0, 0x06, 0xEE, 0x00, 0x00, 0x4C, 0x2B, 0x00,
0xCE, 0x00, 0x00, 0xAE, 0x02, 0x00, 0xAD, 0x00,
0x00, 0xC9, 0x1F, 0xD0, 0x05, 0xA2, 0x01, 0x4C,
0x40, 0x00, 0xC9, 0x00, 0xD0, 0x02, 0xA2, 0x00,
0x8E, 0x02, 0x00, 0xA9, 0x01, 0xA2, 0x00, 0x81,
0x00, 0xA9, 0x00, 0xA2, 0x00, 0x81, 0x03, 0x4C,
0x0F, 0x00
};

unsigned int program_size = sizeof(program);

//the program listing is:
/*
start:
  lda #$f
  sta $0              
  lda #$4
  sta $1              
  lda #$01
  sta $2               

mainloop:
  lda $00              
  sta $03              
  lda $01             
  sta $04             

  lda $02              
  cmp #$00             
  bne notLeft
  inc $0              
  jmp checkBounce
notLeft:
  dec $0               

checkBounce:
  ldx $02              
  lda $0              
  cmp #$1f            
  bne notBounceLeft
  ldx #$1              
  jmp drawRoute
         
notBounceLeft:
  cmp #$0             
  bne drawRoute
  ldx #$0 

drawRoute:
  stx $02              

  lda #$1            
  ldx #$0
  sta ($0,x)         

  lda #$0             
  ldx #$0
  sta ($3,x)          

  jmp mainloop     
*/  

#endif /* PROGRAM_1_H */
